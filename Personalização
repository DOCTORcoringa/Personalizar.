import sys
import time
import os
import json

CONFIG_FILE = os.path.expanduser("~/.termux_custom_config.json")

# Cores ANSI (códigos para texto colorido)
COLORS = {
    "Preto": "30",
    "Vermelho": "31",
    "Verde": "32",
    "Amarelo": "33",
    "Azul": "34",
    "Magenta": "35",
    "Ciano": "36",
    "Branco": "37",
    "Cinza": "90"
}

# Estilos ANSI
STYLES = {
    "Normal": "0",
    "Negrito": "1",
    "Sublinhado": "4",
    "Piscante": "5",
    "Invertido": "7",
    "Negrito + Sublinhado": "1;4",
    "Negrito + Piscante": "1;5",
    "Sublinhado + Piscante": "4;5",
    "Negrito + Invertido": "1;7",
    "Sublinhado + Invertido": "4;7"
}

def type_print(message, color_code="32", style_code="0", delay=0.03):
    # color_code e style_code são strings com códigos ANSI
    ansi_start = f"\033[{style_code};{color_code}m"
    ansi_end = "\033[0m"
    for char in message:
        sys.stdout.write(f"{ansi_start}{char}{ansi_end}")
        sys.stdout.flush()
        time.sleep(delay)
    print()

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as f:
            try:
                return json.load(f)
            except:
                return {}
    return {}

def save_config(config):
    with open(CONFIG_FILE, "w") as f:
        json.dump(config, f)

def show_banner():
    banner_lines = [
        "=======================================",
        "   Termux Customizer por Doctor Coringa Lunático  ",
        "   Mantenha seu ambiente organizado e limpo       ",
        "======================================="
    ]
    for line in banner_lines:
        type_print(line, color_code=COLORS["Verde"], style_code=STYLES["Negrito"], delay=0.01)
    print()

def show_about():
    about_text = (
        "Este sistema foi desenvolvido por Doctor Coringa Lunático\n"
        "em prol de sempre manter o seu ambiente de trabalho organizado e limpo.\n"
        "Este script permite personalizar o Termux com opções que você controla.\n"
        "Slogan: 'Organizar, personalizar, otimizar seu ambiente!'"
    )
    type_print(about_text, delay=0.03)
    print()

def choose_option(options_dict, title):
    type_print(title)
    options = list(options_dict.keys())
    for i, option in enumerate(options, start=1):
        print(f"{i} - {option}")
    while True:
        choice = input("Escolha uma opção pelo número: ").strip()
        if choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(options):
                return options[idx]
        type_print("Opção inválida, tente novamente.")

def menu(config):
    while True:
        type_print("Menu de Personalização - Escolha uma opção:", delay=0.01)
        print("1 - Alterar nome do prompt")
        print("2 - Escolher cor do texto")
        print("3 - Escolher estilo do texto")
        print("4 - Mostrar informações do sistema")
        print("5 - Ver mensagem de boas-vindas")
        print("6 - Sair e salvar")
        choice = input("Opção: ").strip()

        if choice == "1":
            new_name = input("Digite o novo nome para o prompt: ").strip()
            if new_name:
                config["prompt_name"] = new_name
                type_print(f"Nome alterado para: {new_name}")
            else:
                type_print("Nome não pode ser vazio.")
        elif choice == "2":
            cor = choose_option(COLORS, "Escolha a cor do texto:")
            config["color"] = COLORS[cor]
            type_print(f"Cor alterada para: {cor}")
        elif choice == "3":
            estilo = choose_option(STYLES, "Escolha o estilo do texto:")
            config["style"] = STYLES[estilo]
            type_print(f"Estilo alterado para: {estilo}")
        elif choice == "4":
            show_about()
        elif choice == "5":
            name = config.get("prompt_name", "Usuário")
            color = config.get("color", COLORS["Verde"])
            style = config.get("style", STYLES["Normal"])
            msg = f"Seja bem-vindo, {name}!"
            type_print(msg, color_code=color, style_code=style)
        elif choice == "6":
            save_config(config)
            type_print("Configurações salvas. Saindo...")
            break
        else:
            type_print("Opção inválida, tente novamente.")

def welcome_message(config):
    name = config.get("prompt_name", "Usuário")
    color = config.get("color", COLORS["Verde"])
    style = config.get("style", STYLES["Normal"])
    msg = f"Seja bem-vindo, {name}!"
    type_print(msg, color_code=color, style_code=style)

def main():
    os.system("clear")
    config = load_config()
    show_banner()
    welcome_message(config)
    menu(config)

if __name__ == "__main__":
    main()
