import sys
import time
import os
import json
import shutil

try:
    import pyfiglet
except ImportError:
    os.system("pip install pyfiglet")
    import pyfiglet

CONFIG_FILE = os.path.expanduser("~/.termux_custom_config.json")
BASHRC_FILE = os.path.expanduser("~/.bashrc")
BASHRC_BACKUP = os.path.expanduser("~/.bashrc.bak")

MARKER_START = "# === Termux Customizer Start ==="
MARKER_END = "# === Termux Customizer End ==="

COLORS = {
    "Preto": "30",
    "Vermelho": "31",
    "Verde": "32",
    "Amarelo": "33",
    "Azul": "34",
    "Magenta": "35",
    "Ciano": "36",
    "Branco": "37",
    "Cinza": "90"
}

STYLES = {
    "Normal": "0",
    "Negrito": "1",
    "Sublinhado": "4",
    "Piscante": "5",
    "Invertido": "7",
}

def type_print(msg, color="32", style="0", delay=0.03):
    ansi_start = f"\033[{style};{color}m"
    ansi_end = "\033[0m"
    for c in msg:
        sys.stdout.write(ansi_start + c + ansi_end)
        sys.stdout.flush()
        time.sleep(delay)
    print()

def show_banner():
    banner = [
        "=========================================",
        "   Script de Personalização Termux       ",
        "    Criado por Doctor Coringa Lunático   ",
        "  Personalize sua área de trabalho fácil ",
        "========================================="
    ]
    for line in banner:
        type_print(line, "32", "1")  # Verde negrito

def show_spec():
    spec = (
        "Este sistema foi criado por Doctor Coringa Lunático\n"
        "para personalizar seu ambiente de trabalho no Termux.\n"
        "Escolha cores, estilos e defina seu nome para\n"
        "ter um terminal organizado e personalizado.\n"
    )
    type_print(spec, "32", "0")

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE,"r") as f:
            try:
                return json.load(f)
            except:
                return {}
    return {}

def save_config(config):
    with open(CONFIG_FILE,"w") as f:
        json.dump(config,f)

def generate_banner(name):
    try:
        ascii_banner = pyfiglet.figlet_format(name)
        return ascii_banner
    except Exception as e:
        return name.upper()

def update_bashrc(config):
    # Backup do bashrc original
    if not os.path.exists(BASHRC_BACKUP):
        shutil.copy(BASHRC_FILE, BASHRC_BACKUP)

    # Remove trechos antigos do customizer
    if os.path.exists(BASHRC_FILE):
        with open(BASHRC_FILE, "r") as f:
            lines = f.readlines()
        start_idx = None
        end_idx = None
        for i, line in enumerate(lines):
            if line.strip() == MARKER_START:
                start_idx = i
            if line.strip() == MARKER_END:
                end_idx = i
        if start_idx is not None and end_idx is not None and end_idx > start_idx:
            lines = lines[:start_idx] + lines[end_idx+1:]
        with open(BASHRC_FILE, "w") as f:
            f.writelines(lines)

    name = config.get("name", "USUARIO")
    color = config.get("color", "32")
    style = config.get("style", "0")

    banner_ascii = generate_banner(name).replace('\n', '\\n')

    # Script para sobrescrever o bashrc com banner e a mensagem de boas-vindas:
    custom_script = f"""
{MARKER_START}
clear
echo -e "{banner_ascii}"
echo -e "\\033[{style};{color}mSeja bem-vindo, {name}!\\033[0m"
{MARKER_END}
"""

    with open(BASHRC_FILE, "a") as f:
        f.write(custom_script)

def menu(config):
    while True:
        type_print("Menu: 1-Nome 2-Cor 3-Estilo 4-Sair e Salvar", "32", "1")
        choice = input("Opção: ").strip()
        if choice == "1":
            name = input("Digite seu nome (para o banner): ").strip()
            if name:
                config["name"] = name
        elif choice == "2":
            for i, c in enumerate(COLORS.keys(), 1):
                print(f"{i} - {c}")
            cchoice = input("Escolha cor (número): ").strip()
            try:
                ckey = list(COLORS.keys())[int(cchoice)-1]
                config["color"] = COLORS[ckey]
            except:
                type_print("Cor inválida.", "31")
        elif choice == "3":
            for i, s in enumerate(STYLES.keys(), 1):
                print(f"{i} - {s}")
            schoice = input("Escolha estilo (número): ").strip()
            try:
                skey = list(STYLES.keys())[int(schoice)-1]
                config["style"] = STYLES[skey]
            except:
                type_print("Estilo inválido.", "31")
        elif choice == "4":
            save_config(config)
            update_bashrc(config)
            type_print("Configurações salvas e bashrc atualizado! Reinicie o Termux.", "32")
            break
        else:
            type_print("Opção inválida.", "31")

def main():
    os.system("clear")
    show_banner()
    show_spec()
    config = load_config()
    menu(config)

if __name__ == "__main__":
    main()
