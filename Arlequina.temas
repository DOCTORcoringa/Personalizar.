import os
import sys
import time
import json

CONFIG_PATH = os.path.expanduser("~/.termux_custom_panel.json")

BANNERS = [
r"""
  ____                  _             
 |  _ \ ___  __ _  __ _| | ___  _ __  
 | |_) / _ \/ _` |/ _` | |/ _ \| '_ \ 
 |  __/  __/ (_| | (_| | | (_) | | | |
 |_|   \___|\__, |\__,_|_|\___/|_| |_|
             |___/                    
""",
r"""
  _____                  _           
 |  __ \                | |          
 | |  | | ___  ___ _ __ | |_ ___ _ __ 
 |  _  / _ \/ _ \ '_ \| __/ _ \ '__|
 | | \  __/  __/ | | | ||  __/ |   
 |_|  \___|\___|_| |_|\__\___|_|   
"""
]

COLORS = {
    "vermelho": "\033[91m",
    "verde": "\033[92m",
    "amarelo": "\033[93m",
    "azul": "\033[94m",
    "magenta": "\033[95m",
    "ciano": "\033[96m",
    "branco": "\033[97m",
    "reset": "\033[0m"
}

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def caixa_texto(texto):
    largura = len(texto) + 2
    topo = "╔" + "═" * largura + "╗"
    meio = f"║ {texto} ║"
    base = "╚" + "═" * largura + "╝"
    return f"{topo}\n{meio}\n{base}"

def mostrar_banner(nome, banner_idx, cor):
    clear()
    cor_code = COLORS.get(cor, COLORS["reset"])
    banner = BANNERS[banner_idx]
    banner = banner.replace("Termux", nome)
    print(f"{cor_code}{banner}{COLORS['reset']}")

def mostrar_prompt(nome, cor):
    cor_code = COLORS.get(cor, COLORS["reset"])
    print(cor_code)
    print(caixa_texto(nome))
    print(COLORS["reset"])

def mostrar_creditos():
    print("\n" + caixa_texto("Criado por Doctor Coringa Lunático - Hack the Limits!") + "\n")

def save_config(config):
    with open(CONFIG_PATH, 'w') as f:
        json.dump(config, f)

def load_config():
    if os.path.isfile(CONFIG_PATH):
        with open(CONFIG_PATH, 'r') as f:
            return json.load(f)
    return {}

def input_text(prompt, max_len=20):
    while True:
        clear()
        print(f"\033[93m{prompt}\033[0m\n")
        txt = input("> ").strip()
        if 0 < len(txt) <= max_len:
            return txt
        print(f"Texto inválido. Máximo {max_len} caracteres. Tente novamente.")
        input("Pressione Enter para continuar...")

def input_choice(prompt, options):
    while True:
        clear()
        print(f"\033[96m{prompt}\033[0m\n")
        for i, option in enumerate(options, 1):
            print(f"  [{i}] {option}")
        print("\nEscolha um número:")
        choice = input("> ")
        if choice.isdigit():
            num = int(choice)
            if 1 <= num <= len(options):
                return num - 1
        print("Opção inválida. Tente novamente.")
        time.sleep(1)

def loading_bar(text, duration=2, color="verde"):
    clear()
    cor_code = COLORS.get(color, COLORS["reset"])
    print(f"{cor_code}{text}...{COLORS['reset']}")
    for i in range(0, 101, 5):
        sys.stdout.write(f"\r{cor_code}[{'='*(i//5):<20}] {i}%{COLORS['reset']}")
        sys.stdout.flush()
        time.sleep(duration/20)
    print()

def painel_configuracao():
    config = load_config()
    if not config:
        config = {
            "name_banner": "ExemploBanner",
            "banner_idx": 0,
            "color_banner": "verde",
            "name_prompt": "ExemploFront",
            "color_prompt": "ciano"
        }

    while True:
        clear()
        print(caixa_texto("Painel de Personalização - Dr. Inovando"))
        print("\nEscolha uma opção:\n")
        print(" [1] Definir nome do banner")
        print(" [2] Escolher estilo do banner")
        print(" [3] Escolher cor do banner")
        print(" [4] Definir nome do front (prompt/caixinha)")
        print(" [5] Escolher cor do front (prompt/caixinha)")
        print(" [6] Salvar e sair\n")
        mostrar_creditos()

        escolha = input("> ")

        if escolha == "1":
            config["name_banner"] = input_text("Digite o nome para o banner (máx 20 caracteres):")
            loading_bar("Aplicando nome do banner", color="amarelo")
        elif escolha == "2":
            ix_banner = input_choice("Escolha o estilo do banner:", [f"Banner {i+1}" for i in range(len(BANNERS))])
            config["banner_idx"] = ix_banner
            loading_bar("Aplicando estilo do banner", color="ciano")
        elif escolha == "3":
            cores = list(COLORS.keys())
            cores.remove("reset")
            ix_cor_banner = input_choice("Escolha a cor do banner:", cores)
            config["color_banner"] = cores[ix_cor_banner]
            loading_bar("Aplicando cor do banner", color="verde")
        elif escolha == "4":
            config["name_prompt"] = input_text("Digite o nome para o prompt/front (máx 20 caracteres):")
            loading_bar("Aplicando nome do prompt/front", color="magenta")
        elif escolha == "5":
            cores = list(COLORS.keys())
            cores.remove("reset")
            ix_cor_prompt = input_choice("Escolha a cor do prompt/front:", cores)
            config["color_prompt"] = cores[ix_cor_prompt]
            loading_bar("Aplicando cor do prompt/front", color="azul")
        elif escolha == "6":
            save_config(config)
            clear()
            mostrar_banner(config["name_banner"], config["banner_idx"], config["color_banner"])
            mostrar_prompt(config["name_prompt"], config["color_prompt"])
            mostrar_creditos()
            print("Configuração salva e aplicada com sucesso!\n")
            input("Pressione Enter para sair...")
            break
        else:
            print("Opção inválida. Tente novamente.")
            time.sleep(1)

def main():
    config = load_config()
    clear()
    if config:
        mostrar_banner(config["name_banner"], config["banner_idx"], config["color_banner"])
        mostrar_prompt(config["name_prompt"], config["color_prompt"])
        mostrar_creditos()
    else:
        painel_configuracao()

if __name__ == "__main__":
    main()
